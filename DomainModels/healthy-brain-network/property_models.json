[
  {
    "schema_name": "version_timestamp",
    "schema_title": "Version Timestamp",
    "schema_description": "The timestamp at which the version of a data object was created.",
    "schema_type": "property_model",
    "json_schema": {
      "type": ["datetime", "integer"],
      "if": { "type": "integer" },
      "then": {
          "const": 0
      }
    }
  },
  {
      "schema_name": "schema_ref",
      "schema_title": "Schema Reference",
      "schema_description": "A schema reference is a reference to a schema. It is a string that is equal to the schema_name of a schema. It is used to reference a schema from within another schema.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^(?!.*(__|time_of_removal))[a-zA-Z0-9_]+$"
      }
    },
    {
      "schema_name": "schema_type",
      "schema_title": "Schema Type",
      "schema_description": "A schema type is a string that is equal to the schema_type of a schema. It is used to identify the type of a schema.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^(?!.*(__|time_of_removal))[a-zA-Z0-9_]+$"
      }
    },
    {
      "schema_name": "schema_name",
      "schema_title": "Schema Name",
      "schema_description": "A schema name is a string that is equal to the schema_name of a schema. It is used to identify a schema.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^(?!.*(__|time_of_removal))[a-zA-Z0-9_]+$"
      }
    },
    {
      "schema_name": "schema_title",
      "schema_title": "Schema Title",
      "schema_description": "A schema title is a string that is equal to the schema_title of a schema. It is used to identify the title of a schema.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {
      "schema_name": "schema_description",
      "schema_title": "Schema Description",
      "schema_description": "A schema description is a string that is equal to the schema_description of a schema. It is used to identify the description of a schema.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {
      "schema_name": "data_name",
      "schema_title": "Data Name",
      "schema_description": "A data name is a string that is equal to the data_name of a data object. It is used to identify a data object in conjunction with a schema_ref.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {
      "schema_name": "time_of_save",
      "schema_title": "Time of Creation",
      "schema_description": "The timestamp at which the record was created.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "datetime"
      }
    },
    {
      "schema_name": "time_of_removal",
      "schema_title": "Time of Deletion",
      "schema_description": "The timestamp at which the record was deleted.",
      "schema_type": "property_model",
      "json_schema": {
        "type": ["datetime", "null"]
      }
    },
    {
      "schema_name": "record_type",
      "schema_title": "Record Type",
      "schema_description": "The schema_name of a schema used to identify the type of record or data object. Also used as a unique identifier for schemas when they are loaded into the database and queried.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^(?!.*(__|time_of_removal))[a-zA-Z0-9_]+$"
      }
    },
    {
      "schema_name": "modality",
      "schema_title": "Modality",
      "schema_description": "Recording modality",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "[EEG, ECoG, MEG, LFP, Spike, Stimuli, Behavioral]"
      }
    },
    {
      "schema_name": "json_schema",
      "schema_title": "JSON Schema Body",
      "schema_description": "The body of a schema. This is a JSON Schema that describes the structure of a record or data object.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {
      "schema_name": "has_file",
      "schema_title": "Has Data",
      "schema_description": "A boolean term (true or false) that says whether or not a record has data associated with it. If a record has data, then it is a data record. If a record does not have data, then it is a metadata record.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "boolean"
      }
    },
    {
      "schema_name": "unit_of_measure",
      "schema_title": "Unit of Measure",
      "schema_description": "A unit of measure says what a quantity is counting or measuring. Most units of measure are SI Units such as centimeters, volts, etc. However, in the context of this domain, there may be units of measure such as neurons (nominal scale), number of spikes (integer scale) or any other number of specific unit types.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {
      "schema_name": "dimension_of_measure",
      "schema_title": "Dimension of Measure",
      "schema_description": "A Dimension of Measure refers to the dimensional property of a Unit of Measure. For example, if my unit of measure is centimeters then my dimension of measure is length. Likewise for seconds and time. More exotic examples exist as well. Spikes have the dimension of measure count and neurons have the dimension of measure nominal (nominal refers to a category or label). Dimension of measure strings must start and end with square braces and they must contain only alphabetical characters in between.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^\\[([a-zA-Z]+)\\]$"
      }
    },
    {
      "schema_name": "acquisition",
      "schema_title": "Acquisition",
      "schema_description": "An acquisition is a boolean term (true or false) that says whether or not a data object was acquired from a source outside of the data analysis process. All of the data objects read from external data are flagged as being acquisitions. Readers never do preprocessing so that they may reflect the exact numerical values from the original data source.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "boolean"
      }
    },
    {
      "schema_name": "acquisition_date",
      "schema_title": "Acquisition Date",
      "schema_description": "The date when an acquisition was originally produced (usually taken from the metadata of a recording file.)",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^([0-9]{4}-[0-9]{2}-[0-9]{2})$"
      }
    },
    {
      "schema_name": "import_date",
      "schema_title": "Import Date",
      "schema_description": "The date when an acquisition (an imported data set) was imported.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^([0-9]{4}-[0-9]{2}-[0-9]{2})$"
      }
    },
    {
      "schema_name": "acquisition_notes",
      "schema_title": "Acquisition Notes",
      "schema_description": "Notes on the progeny of an acquisition. This field is usually automatically populated with an explanation of what the acquisition is by an import adapter within signalstore.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {
      "schema_name": "data_dimensions",
      "schema_title": "Data Dimensions",
      "schema_description": "This term refers to a data structure that stores the dimensions and coordinate references of a data object. If the data object is an xarray DataArray, then the attribute should match the .dims attribute of an xarray DataArray.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    },
    {
      "schema_name": "shape",
      "schema_title": "Shape",
      "schema_description": "The shape of a data object. This is a list of integers that is equal to the shape of the data object. It lists the shape that would go into the .shape attribute of an xarray DataArray.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "array",
        "items": {
          "type": "integer"
        }
      }
    },
    {
      "schema_name": "dtype",
      "schema_title": "Data Type",
      "schema_description": "The data type of a data object. This is a string that is equal to the dtype of the data object. It lists the dtype that would go into the .dtype attribute of an xarray DataArray.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {
      "schema_name": "session_description",
      "schema_title": "Session Description",
      "schema_description": "A description of a session.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {
      "schema_name": "session_date",
      "schema_title": "Session Date",
      "schema_description": "The date when a session was taken.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^([0-9]{4}-[0-9]{2}-[0-9]{2})$"
      }
    },
    {
      "schema_name": "session_time",
      "schema_title": "Session Time",
      "schema_description": "The time when a session was started.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?$"
      }
    },
    {
      "schema_name": "session_duration",
      "schema_title": "Session Duration",
      "schema_description": "The duration of a session.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?$"
      }
    },
    {
      "schema_name": "session_notes",
      "schema_title": "Session Notes",
      "schema_description": "Notes about a session.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
      }
    },
    {"schema_name": "session_run",
    "schema_title": "Run",
    "schema_description": "Session run number",
    "schema_type": "property_model",
    "json_schema": {
      "type": "integer"
      }
    },
    {
      "schema_name": "data_ref",
      "schema_title": "Data Reference",
      "schema_description": "A reference to a data object that stores the kwargs necessary to get the data object from the data repository. This is a special property model that applies to any property name that ends with _ref. It is used to reference a data object from within another data object.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "object",
        "properties": {
          "schema_ref": {
            "type": "string",
            "pattern": "^(?!.*(__|time_of_removal))[a-zA-Z0-9_/-]+$"
          },
          "data_name": {
            "type": "string",
            "pattern": "^(?!.*(__|time_of_removal))[a-zA-Z0-9_/-]+$"
          },
          "version_timestamp": {
            "type": ["datetime", "integer"],
            "if": { "type": "integer" },
            "then": {
                "const": 0
            }
          }
        },
        "required": [
          "schema_ref",
          "data_name"
        ]
      }
    },
    {
      "schema_name": "start_time",
      "schema_title": "Start Time",
      "schema_description": "The start time of a timeseries data object or a referenced event (such as a recording session). This is a string that is equal to the start_time of the data object.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string",
        "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](\\.[0-9]+)?$"
      }
    },
    {
      "schema_name": "duration",
      "schema_title": "Duration",
      "schema_description": "The duration of a timeseries object or a referenced event (such as a recording session). This is a string that is equal to the duration of the data object.",
      "schema_type": "property_model",
      "json_schema": {
        "type": "string"
        }
    },
    {"schema_name": "duration_unit",
    "schema_title": "Duration Unit",
    "schema_description": "The SI unit of the duration of a timeseries object or a referenced event (such as a recording session). This is a string that is equal to the duration_unit of the data object.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "animal_species",
    "schema_title": "Animal Species",
    "schema_description": "The species of the animal that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "age",
    "schema_title": "Age",
    "schema_description": "The age of the animal that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "age_unit",
    "schema_title": "Age Unit",
    "schema_description": "The unit of age of the animal that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "age_lower_bound",
    "schema_title": "Age Lower Bound",
    "schema_description": "The lower bound of the age of the animal that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "age_upper_bound",
    "schema_title": "Age Upper Bound",
    "schema_description": "The upper bound of the age of the animal that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "animal_id",
    "schema_title": "Animal ID",
    "schema_description": "The ID of the animal that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "tetrode_id",
    "schema_title": "Tetrode ID",
    "schema_description": "The ID of the tetrode that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "tetrode_depth",
    "schema_title": "Tetrode Depth",
    "schema_description": "The depth of the tetrode that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "genotype",
    "schema_title": "Genotype",
    "schema_description": "The genotype of the animal that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "animal_strain",
    "schema_title": "Animal strain",
    "schema_description": "The strain of the animal that was recorded from.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "stimulus_type",
    "schema_title": "Stimulus Type",
    "schema_description": "The type of stimulus that was presented to the animal.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "stimulus_id",
    "schema_title": "Stimulus ID",
    "schema_description": "The ID of the stimulus that was presented to the animal.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "stimulus_description",
    "schema_title": "Stimulus Description",
    "schema_description": "A description of the stimulus that was presented to the animal.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "recording_length",
    "schema_title": "Recording Length",
    "schema_description": "The length of the recording.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "sample_rate",
    "schema_title": "Sample Rate",
    "schema_description": "The sample rate of the recording.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "arena_shape",
    "schema_title": "Arena Shape",
    "schema_description": "The shape of the arena.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name":"arena_description",
    "schema_title":"Arena Description",
    "schema_description":"A description of the arena.",
    "schema_type":"property_model",
    "json_schema":{
      "type":"string"
      }
    },
    {"schema_name": "study_description",
    "schema_title": "Study Description",
    "schema_description": "A description of the study.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "arena_height",
    "schema_title": "Arena Height",
    "schema_description": "The height of the arena.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "arena_width",
    "schema_title": "Arena Width",
    "schema_description": "The width of the arena.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "diameter",
    "schema_title": "Diameter",
    "schema_description": "The diameter of a circular arena.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "arena_side_length",
    "schema_title": "Square Arena Side Length",
    "schema_description": "The side length of a square arena.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "arena_radius",
    "schema_title": "Circular Arena Radius",
    "schema_description": "The radius of a circular arena.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "spike_count",
    "schema_title": "Spike Count",
    "schema_description": "The number of spikes in a recording.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "subject",
    "schema_title": "Subject",
    "schema_description": "The ID of the participant.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "sampling_frequency",
    "schema_title": "Sampling Frequency",
    "schema_description": "The sampling frequency (Hz) of the recording.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "integer"
      }
    },
    {"schema_name": "attending_direction",
    "schema_title": "Attending Direction",
    "schema_description": "(Cocktail Dataset): The description of which ear hears the story.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "attending_story",
    "schema_title": "Attending Story",
    "schema_description": "(Cocktail Dataset): The description of which story the participants.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
      }
    },
    {"schema_name": "attend_score",
    "schema_title": "Attend Score",
    "schema_description": "(Cocktail Dataset): The score of the questionare for the story the participant is supposed to listen to.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "number"
      }
    },
    {"schema_name": "nonattend_score",
    "schema_title": "Nonattend Score",
    "schema_description": "(Cocktail Dataset): The score of the questionare for the story the participant is not supposed to listen to.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "number"
      }
    },
  {
    "schema_name": "original_length",
    "schema_title": "Original Length",
    "schema_description": "The original length of the recording.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "integer"
    }
  },
  {
    "schema_name": "story",
    "schema_title": "Story",
    "schema_description": "The Name of the Story.",
    "schema_type": "property_model",
    "json_schema": {
      "type": "string"
    }
  },
  {"schema_name": "task",
  "schema_title": "Task",
  "schema_description": "The task subject performs.",
  "schema_type": "property_model",
  "json_schema": {
    "type": "string"
    }
  }
]

